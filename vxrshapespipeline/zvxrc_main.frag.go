// go run goarrg.com/rhi/vxr/cmd/vxrc -dir=./shaders -generator=go -skip-metadata main.frag 
// Code generated by the command above; DO NOT EDIT.

package main

import(
	"goarrg.com/rhi/vxr"
)

func vxrcLoad_main_frag() (spv *vxr.Shader, layout *vxr.ShaderLayout) {
	spv = &vxr.Shader{ID:"main.frag", SPIRV:[]uint32{0x7230203, 0x10600, 0xd000b, 0x17, 0x0, 0x20011, 0x1, 0x6000b, 0x2, 0x4c534c47, 0x6474732e, 0x3035342e, 0x0, 0x3000e, 0x0, 0x1, 0x8000f, 0x4, 0x5, 0x6e69616d, 0x0, 0xa, 0xd, 0x16, 0x30010, 0x5, 0x7, 0x50007, 0x1, 0x6e69616d, 0x6172662e, 0x67, 0xd30003, 0x2, 0x1c2, 0x1, 0x430a2a2f, 0x7279706f, 0x74686769, 0x32303220, 0x68542030, 0x6f672065, 0x47525241, 0x74754120, 0x73726f68, 0x4c0a0a2e, 0x6e656369, 0x20646573, 0x65646e75, 0x68742072, 0x70412065, 0x65686361, 0x63694c20, 0x65736e65, 0x6556202c, 0x6f697372, 0x2e32206e, 0x74282030, 0x22206568, 0x6563694c, 0x2265736e, 0x790a3b29, 0x6d20756f, 0x6e207961, 0x7520746f, 0x74206573, 0x20736968, 0x656c6966, 0x63786520, 0x20747065, 0x63206e69, 0x6c706d6f, 0x636e6169, 0x69772065, 0x74206874, 0x4c206568, 0x6e656369, 0xa2e6573, 0x20756f59, 0x2079616d, 0x6174626f, 0x61206e69, 0x706f6320, 0x666f2079, 0x65687420, 0x63694c20, 0x65736e65, 0xa746120, 0x7468090a, 0x2f3a7074, 0x7777772f, 0x6170612e, 0x2e656863, 0x2f67726f, 0x6563696c, 0x7365736e, 0x43494c2f, 0x45534e45, 0x302e322d, 0x6e550a0a, 0x7373656c, 0x71657220, 0x65726975, 0x79622064, 0x70706120, 0x6163696c, 0x20656c62, 0x2077616c, 0x6120726f, 0x65657267, 0x6f742064, 0x206e6920, 0x74697277, 0x2c676e69, 0x666f7320, 0x72617774, 0x69640a65, 0x69727473, 0x65747562, 0x6e752064, 0x20726564, 0x20656874, 0x6563694c, 0x2065736e, 0x64207369, 0x72747369, 0x74756269, 0x6f206465, 0x6e61206e, 0x53412220, 0x22534920, 0x53414220, 0xa2c5349, 0x48544957, 0x2054554f, 0x52524157, 0x49544e41, 0x4f205345, 0x4f432052, 0x5449444e, 0x534e4f49, 0x20464f20, 0x20594e41, 0x444e494b, 0x6965202c, 0x72656874, 0x70786520, 0x73736572, 0x20726f20, 0x6c706d69, 0x2e646569, 0x6565530a, 0x65687420, 0x63694c20, 0x65736e65, 0x726f6620, 0x65687420, 0x65707320, 0x69666963, 0x616c2063, 0x6175676e, 0x67206567, 0x7265766f, 0x676e696e, 0x72657020, 0x7373696d, 0x736e6f69, 0x646e6120, 0x6d696c0a, 0x74617469, 0x736e6f69, 0x646e7520, 0x74207265, 0x4c206568, 0x6e656369, 0xa2e6573, 0xa0a2f2a, 0x72657623, 0x6e6f6973, 0x30353420, 0x7865230a, 0x736e6574, 0x206e6f69, 0x415f4c47, 0x735f4252, 0x72617065, 0x5f657461, 0x64616873, 0x6f5f7265, 0x63656a62, 0x3a207374, 0x616e6520, 0xa656c62, 0x61727023, 0x20616d67, 0x64616873, 0x735f7265, 0x65676174, 0x61726628, 0x6e656d67, 0xa0a2974, 0x6f79616c, 0x6c287475, 0x7461636f, 0x206e6f69, 0x2930203d, 0x206e6920, 0x74616c66, 0x6e697520, 0x6e692074, 0x6e617473, 0x44496563, 0x616c0a3b, 0x74756f79, 0x636f6c28, 0x6f697461, 0x203d206e, 0x69202931, 0x6576206e, 0x75203263, 0xa0a3b76, 0x6f79616c, 0x6c287475, 0x7461636f, 0x206e6f69, 0x2930203d, 0x74756f20, 0x63657620, 0x756f2034, 0x6c6f4374, 0xa3b726f, 0x696f760a, 0x616d2064, 0x29286e69, 0x90a7b20, 0x4374756f, 0x726f6c6f, 0x76203d20, 0x28346365, 0x202c7675, 0x31202c30, 0x3b29302e, 0xa7d0a, 0x90004, 0x415f4c47, 0x735f4252, 0x72617065, 0x5f657461, 0x64616873, 0x6f5f7265, 0x63656a62, 0x7374, 0xa0004, 0x475f4c47, 0x4c474f4f, 0x70635f45, 0x74735f70, 0x5f656c79, 0x656e696c, 0x7269645f, 0x69746365, 0x6576, 0x80004, 0x475f4c47, 0x4c474f4f, 0x6e695f45, 0x64756c63, 0x69645f65, 0x74636572, 0x657669, 0x40005, 0x5, 0x6e69616d, 0x0, 0x50005, 0xa, 0x4374756f, 0x726f6c6f, 0x0, 0x30005, 0xd, 0x7675, 0x50005, 0x16, 0x74736e69, 0x65636e61, 0x4449, 0x6014a, 0x72746e65, 0x6f702d79, 0x20746e69, 0x6e69616d, 0x0, 0x6014a, 0x65696c63, 0x7620746e, 0x616b6c75, 0x3030316e, 0x0, 0x6014a, 0x67726174, 0x652d7465, 0x7320766e, 0x76726970, 0x362e31, 0x7014a, 0x67726174, 0x652d7465, 0x7620766e, 0x616b6c75, 0x332e316e, 0x0, 0x6014a, 0x72746e65, 0x6f702d79, 0x20746e69, 0x6e69616d, 0x0, 0x40047, 0xa, 0x1e, 0x0, 0x40047, 0xd, 0x1e, 0x1, 0x30047, 0x16, 0xe, 0x40047, 0x16, 0x1e, 0x0, 0x20013, 0x3, 0x30021, 0x4, 0x3, 0x30016, 0x7, 0x20, 0x40017, 0x8, 0x7, 0x4, 0x40020, 0x9, 0x3, 0x8, 0x4003b, 0x9, 0xa, 0x3, 0x40017, 0xb, 0x7, 0x2, 0x40020, 0xc, 0x1, 0xb, 0x4003b, 0xc, 0xd, 0x1, 0x4002b, 0x7, 0xf, 0x0, 0x4002b, 0x7, 0x10, 0x3f800000, 0x40015, 0x14, 0x20, 0x0, 0x40020, 0x15, 0x1, 0x14, 0x4003b, 0x15, 0x16, 0x1, 0x40008, 0x1, 0x1a, 0xb, 0x50036, 0x3, 0x5, 0x0, 0x4, 0x200f8, 0x6, 0x40008, 0x1, 0x1b, 0x0, 0x4003d, 0xb, 0xe, 0xd, 0x50051, 0x7, 0x11, 0xe, 0x0, 0x50051, 0x7, 0x12, 0xe, 0x1, 0x70050, 0x8, 0x13, 0x11, 0x12, 0xf, 0x10, 0x3003e, 0xa, 0x13, 0x40008, 0x1, 0x1c, 0x0, 0x100fd, 0x10038}}
	layout = &vxr.ShaderLayout{EntryPoints:map[string]vxr.ShaderEntryPointLayout{"main":vxr.ShaderEntryPointFragmentLayout{Name:"main", NumRenderColorAttachments:0x1}}, PushConstants:struct { Offset uint32; Size uint32 }{Offset:0x0, Size:0x0}, DescriptorSetLayouts:[][]struct { DescriptorType vxr.DescriptorType; DescriptorCount vxr.ShaderConstant }{}}
	return
}
